#!/bin/bash

apt purge snapd -y && apt autoremove -y

if [[ -f /etc/needrestart/needrestart.conf ]]; then
    export NEEDRESTART_MODE=a
    sed "s+#\$nrconf{restart} = '.*';+\$nrconf{restart} = 'a';+" -i /etc/needrestart/needrestart.conf
fi

apt update && apt upgrade -y

add-apt-repository -y ppa:maxmind/ppa

apt install -y build-essential software-properties-common curl wget libgd-dev libgeoip-dev libpcre3-dev libperl-dev libssl-dev libxslt-dev lsb-release zlib1g-dev tar unzip libpq-dev libpam0g-dev uuid-dev mmdb-bin libmaxminddb0 libmaxminddb-dev

[[ -d /usr/src/qycli/nginx ]] && rm -rf /usr/src/qycli/nginx

##### #####
# Download NGINX
ngxLatestVer=$(curl 'http://nginx.org/download/' | grep -oP 'href="nginx-\K[0-9]+\.[0-9]+\.[0-9]+' | sort -t. -rn -k1,1 -k2,2 -k3,3 | head -1)

mkdir -p /usr/src/qycli/nginx
cd /usr/src/qycli/nginx || exit

curl "http://nginx.org/download/nginx-${ngxLatestVer}.tar.gz" >nginx-"$ngxLatestVer".tar.gz
tar -zxf nginx-"$ngxLatestVer".tar.gz --strip-components=1

##### #####
# Download Dependencies and Modules and unpack them to sources/

#####
# Functions
set_github_url() {
    curl -s https://github.com/"$github_repo"/tags | tac | tac | grep "$github_repo" | grep -m1 "tar.gz" | grep -Eo "/$github_repo/[a-zA-Z0-9./?=_%:-]*"
}

#####
# Download Dependencies

## zlib
github_repo=cloudflare/zlib
zlib_source=https://github.com$(set_github_url)

mkdir -p sources/dependencies/zlib
wget -qO zlib.tar.gz "$zlib_source"
tar -zxf zlib.tar.gz --strip-components=1 -C sources/dependencies/zlib

## OpenSSL
github_repo=openssl/openssl
openssl_source=https://github.com$(set_github_url)

mkdir sources/dependencies/openssl
wget -qO openssl.tar.gz "$openssl_source"
tar -zxf openssl.tar.gz --strip-components=1 -C sources/dependencies/openssl

#####
# Download Modules Source Code

## NGX Cache Purge
github_repo=nginx-modules/ngx_cache_purge
ngx_cache_purge_source=https://github.com$(set_github_url)

mkdir -p sources/modules/ngx_cache_purge
wget -qO ngx_cache_purge.tar.gz "$ngx_cache_purge_source"
tar -zxf ngx_cache_purge.tar.gz --strip-components=1 -C sources/modules/ngx_cache_purge

## NGX Headers More
ngx_headers_more_source=https://github.com/openresty/headers-more-nginx-module/tarball/master

mkdir -p sources/modules/ngx_headers_more
wget -qO ngx_headers_more.tar.gz "$ngx_headers_more_source"
tar -zxf ngx_headers_more.tar.gz --strip-components=1 -C sources/modules/ngx_headers_more

## NGX HTTP AUTH PAM
ngx_http_auth_pam_module_source=https://github.com/sto/ngx_http_auth_pam_module/tarball/master

mkdir -p sources/modules/ngx_http_auth_pam_module
wget -qO ngx_http_auth_pam_module.tar.gz "$ngx_http_auth_pam_module_source"
tar -zxf ngx_http_auth_pam_module.tar.gz --strip-components=1 -C sources/modules/ngx_http_auth_pam_module

## Nginx Dav Ext
github_repo=arut/nginx-dav-ext-module
nginx_dav_ext_module_source=https://github.com$(set_github_url)

mkdir -p sources/modules/nginx-dav-ext-module
wget -qO nginx-dav-ext-module.tar.gz "$nginx_dav_ext_module_source"
tar -zxf nginx-dav-ext-module.tar.gz --strip-components=1 -C sources/modules/nginx-dav-ext-module

## NGX Devel Kit
github_repo=vision5/ngx_devel_kit
ngx_devel_kit_source=https://github.com$(set_github_url)

mkdir -p sources/modules/ngx_devel_kit
wget -qO ngx_devel_kit.tar.gz "$ngx_devel_kit_source"
tar -zxf ngx_devel_kit.tar.gz --strip-components=1 -C sources/modules/ngx_devel_kit

## Echo Nginx
echo_nginx_module_source=https://github.com/openresty/echo-nginx-module/tarball/master

mkdir -p sources/modules/echo_nginx_module
wget -qO echo_nginx_module.tar.gz "$echo_nginx_module_source"
tar -zxf echo_nginx_module.tar.gz --strip-components=1 -C sources/modules/echo_nginx_module

## NGX Fancyindex
github_repo=aperezdc/ngx-fancyindex
ngx_fancyindex_source=https://github.com$(set_github_url)

mkdir -p sources/modules/ngx-fancyindex
wget -qO ngx-fancyindex.tar.gz "$ngx_fancyindex_source"
tar -zxf ngx-fancyindex.tar.gz --strip-components=1 -C sources/modules/ngx-fancyindex

## NCHAN
nchan_source=https://github.com/slact/nchan/tarball/master

mkdir -p sources/modules/nchan
wget -qO nchan.tar.gz "$nchan_source"
tar -zxf nchan.tar.gz --strip-components=1 -C sources/modules/nchan

## Nginx RTMP
nginx_rtmp_module_source=https://github.com/arut/nginx-rtmp-module/tarball/master

mkdir -p sources/modules/nginx-rtmp-module
wget -qO nginx-rtmp-module.tar.gz "$nginx_rtmp_module_source"
tar -zxf nginx-rtmp-module.tar.gz --strip-components=1 -C sources/modules/nginx-rtmp-module

## NGX HTTP Substitutions Filter
ngx_http_substitutions_filter_module_source=https://github.com/yaoweibin/ngx_http_substitutions_filter_module/tarball/master

mkdir -p sources/modules/ngx_http_substitutions_filter_module
wget -qO ngx_http_substitutions_filter_module.tar.gz "$ngx_http_substitutions_filter_module_source"
tar -zxf ngx_http_substitutions_filter_module.tar.gz --strip-components=1 -C sources/modules/ngx_http_substitutions_filter_module

## NGX HTTP GeoIP2
github_repo=leev/ngx_http_geoip2_module
ngx_http_geoip2_module_source=https://github.com$(set_github_url)

mkdir -p sources/modules/ngx_http_geoip2_module
wget -qO ngx_http_geoip2_module.tar.gz "$ngx_http_geoip2_module_source"
tar -zxf ngx_http_geoip2_module.tar.gz --strip-components=1 -C sources/modules/ngx_http_geoip2_module

##### #####
# Compilation

./configure '--with-ld-opt=-lpcre -Wl,-rpath,/usr/local/luajit/lib' \
    --with-cc-opt='-Wno-error' \
    --conf-path=/etc/nginx/nginx.conf \
    --http-log-path=/var/log/nginx/access.log \
    --error-log-path=/var/log/nginx/error.log \
    --lock-path=/var/lock/nginx.lock \
    --pid-path=/run/nginx.pid \
    --http-fastcgi-temp-path=/var/lib/nginx/fastcgi \
    --http-proxy-temp-path=/var/lib/nginx/proxy \
    --http-scgi-temp-path=/var/lib/nginx/scgi \
    --http-uwsgi-temp-path=/var/lib/nginx/uwsgi \
    --with-compat \
    --with-openssl=sources/dependencies/openssl \
    --with-openssl-opt=enable-ec_nistp_64_gcc_128 \
    --with-openssl-opt=no-weak-ssl-ciphers \
    --with-pcre-jit \
    --with-zlib=sources/dependencies/zlib \
    --with-http_ssl_module \
    --with-http_stub_status_module \
    --with-http_realip_module \
    --with-http_auth_request_module \
    --with-http_dav_module \
    --with-http_slice_module \
    --with-threads \
    --with-file-aio \
    --with-http_addition_module \
    --with-http_flv_module \
    --with-http_gunzip_module \
    --with-http_gzip_static_module \
    --with-http_image_filter_module=dynamic \
    --with-http_mp4_module \
    --with-http_random_index_module \
    --with-http_secure_link_module \
    --with-http_sub_module \
    --with-http_xslt_module=dynamic \
    --with-mail=dynamic \
    --with-mail_ssl_module \
    --with-stream \
    --with-stream_ssl_module \
    --with-stream_ssl_preread_module \
    --add-dynamic-module=sources/modules/ngx_cache_purge \
    --add-dynamic-module=sources/modules/ngx_headers_more \
    --add-dynamic-module=sources/modules/ngx_http_auth_pam_module \
    --add-dynamic-module=sources/modules/nginx-dav-ext-module \
    --add-dynamic-module=sources/modules/ngx_devel_kit \
    --add-dynamic-module=sources/modules/echo_nginx_module \
    --add-dynamic-module=sources/modules/ngx-fancyindex \
    --add-dynamic-module=sources/modules/nchan \
    --add-dynamic-module=sources/modules/nginx-rtmp-module \
    --add-dynamic-module=sources/modules/ngx_http_substitutions_filter_module \
    --add-dynamic-module=sources/modules/ngx_http_geoip2_module

make -j4

make install

rsync -a --mkpath /usr/local/nginx/ /nginx-result/usr/local/nginx

##### #####
# Getting dynamic libraries
ldd /usr/local/nginx/sbin/nginx | grep -o "/.* " | cut -d ' ' -f 1 >>/usr/src/qycli/nginx/alllibs
for lib in $(ldd /usr/local/nginx/sbin/nginx | grep -o "/.* "); do
    ldd "$lib" | grep -o "/.* " | cut -d ' ' -f 1 >>/usr/src/qycli/nginx/alllibs
    for lib2 in $(ldd "$lib" | grep -o "/.* "); do
        ldd "$lib2" | grep -o "/.* " | cut -d ' ' -f 1 >>/usr/src/qycli/nginx/alllibs
        for lib3 in $(ldd "$lib2" | grep -o "/.* "); do
            ldd "$lib3" | grep -o "/.* " | cut -d ' ' -f 1 >>/usr/src/qycli/nginx/alllibs
        done
    done
done

cd /usr/local/nginx/modules || exit

for ext in *; do
    ldd "$ext" | grep -o "/.* " | cut -d ' ' -f 1 >>/usr/src/qycli/nginx/alllibs
    for lib in $(ldd "$ext" | grep -o "/.* "); do
        ldd "$lib" | grep -o "/.* " | cut -d ' ' -f 1 >>/usr/src/qycli/nginx/alllibs
        for lib2 in $(ldd "$lib" | grep -o "/.* "); do
            ldd "$lib2" | grep -o "/.* " | cut -d ' ' -f 1 >>/usr/src/qycli/nginx/alllibs
        done
    done
done

sort -u /usr/src/qycli/nginx/alllibs >/usr/src/qycli/nginx/libssorted

while IFS= read -r lib; do
    libdir=$(echo /nginx-result"$lib" | grep -o "/.*/")
    [[ ! -d $libdir ]] && mkdir -p "$libdir"
    rsync -aL "$lib" /nginx-result"$lib"
done </usr/src/qycli/nginx/libssorted

##### #####
# Unused Modules - For using they have to be moved up

# NGX Lua
#mkdir -p sources/modules/lua-nginx-module
#github_repo=openresty/lua-nginx-module
#lua_nginx_module_source=https://github.com$(set_github_url)
#wget -qO lua-nginx-module.tar.gz "$lua_nginx_module_source"
#tar zxvf lua-nginx-module.tar.gz --strip-components=1 -C sources/modules/lua-nginx-module
#sed -i '1i\LUAJIT_INC="/usr/local/luajit/include/luajit-2.1"' sources/modules/lua-nginx-module/config
#sed -i '1i\LUAJIT_LIB="/usr/local/luajit/lib"' sources/modules/lua-nginx-module/config

#mkdir -p sources/modules/openresty_luajit2
#github_repo=openresty/luajit2
#openresty_luajit2_source=https://github.com$(set_github_url)
#wget -qO openresty_luajit2.tar.gz "$openresty_luajit2_source"
#tar zxvf openresty_luajit2.tar.gz --strip-components=1 -C sources/modules/openresty_luajit2
#make -C sources/modules/openresty_luajit2
#make -C sources/modules/openresty_luajit2 install PREFIX=/usr/local/luajit

#mkdir -p sources/modules/lua_resty_core
#lua_resty_core_source=https://github.com/openresty/lua-resty-core/tarball/master
#wget -qO lua_resty_core.tar.gz "$lua_resty_core_source"
#tar -zxf lua_resty_core.tar.gz --strip-components=1 -C sources/modules/lua_resty_core

#mkdir -p sources/modules/lua_resty_lrucache
#lua_resty_lrucache_source=https://github.com/openresty/lua-resty-lrucache/tarball/master
#wget -qO lua_resty_lrucache.tar.gz "$lua_resty_lrucache_source"
#tar -zxf lua_resty_lrucache.tar.gz --strip-components=1 -C sources/modules/lua_resty_lrucache

## Nginx Upload Progress
#nginx_upload_progress_module_source=https://github.com/masterzen/nginx-upload-progress-module/tarball/master

#mkdir -p sources/modules/nginx-upload-progress-module
#wget -qO nginx-upload-progress-module.tar.gz $nginx_upload_progress_module_source
#[[ ! -s nginx-upload-progress-module.tar.gz ]] && echo "Nginx Upload Progress download didn't work"
#tar -zxf nginx-upload-progress-module.tar.gz --strip-components=1 -C sources/modules/nginx-upload-progress-module

## NGX Brotli
#ngx_brotli_source=https://github.com/google/ngx_brotli/tarball/master
#github_repo=google/brotli
#brotli_source=https://github.com$(set_github_url)

#mkdir -p sources/modules/ngx_brotli/deps/brotli
#wget -qO ngx_brotli.tar.gz $ngx_brotli_source
#[[ ! -s ngx_brotli.tar.gz ]] && echo "NGX Brotli download didn't work"
#tar -zxf ngx_brotli.tar.gz --strip-components=1 -C sources/modules/ngx_brotli
#wget -qO brotli.tar.gz "$brotli_source"
#[[ ! -s brotli.tar.gz ]] && echo "Brotli download didn't work"
#tar -zxf brotli.tar.gz --strip-components=1 -C sources/modules/ngx_brotli/deps/brotli

## NGX Pagespeed
#github_repo=apache/incubator-pagespeed-ngx
#incubator_pagespeed_ngx_source=https://github.com$(set_github_url)

#mkdir -p sources/modules/incubator-pagespeed-ngx
#wget -qO incubator-pagespeed-ngx.tar.gz "$incubator_pagespeed_ngx_source"
#[[ ! -s incubator-pagespeed-ngx.tar.gz ]] && echo "NGX Pagespeed download didn't work"
#tar -zxf incubator-pagespeed-ngx.tar.gz --strip-components=1 -C sources/modules/incubator-pagespeed-ngx
#psol=$(cat sources/modules/incubator-pagespeed-ngx/PSOL_BINARY_URL)
#wget -qO psol.tar.gz ${psol/'$BIT_SIZE_NAME'/x64}
#[[ ! -s psol.tar.gz ]] && echo "PSOL download didn't work"
#tar -zxf psol.tar.gz -C sources/modules/incubator-pagespeed-ngx
